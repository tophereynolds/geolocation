# Run these commands before executing any build jobs,
# such as to install dependencies and set environment variables
#
before_script:
    # Decrypt server key
    - openssl enc -aes-256-cbc -md sha256 -salt -d -in assets/server.key.enc -out assets/server.key -k $SERVER_KEY_PASSWORD -pbkdf2
    # Install jq, a json parsing library
    - apt update && apt -y install jq
    # Setup SFDX environment variables
    # https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_env_variables.htm
    - export SALESFORCE_CLI_URL=https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    - export SFDX_AUTOUPDATE_DISABLE=false
    - export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true
    - export SFDX_DOMAIN_RETRY=600
    - export SFDX_LOG_LEVEL=DEBUG
    # Install Salesforce CLI
    - mkdir sfdx
    - wget -qO- $SALESFORCE_CLI_URL | tar xJ -C sfdx --strip-components 1
    - './sfdx/install'
    - export PATH=./sfdx/$(pwd):$PATH
    # Output CLI version and plug-in information
    - sfdx update
    - sfdx --version
    - sfdx plugins --core
#
# Define the stages of our pipeline
#
stages:
    - code-testing
    - integration-testing
    - app-deploy
#
# Stage 1 -- Create a scratch org for code testing
#
code-testing:
    stage: code-testing
    script:
        # Authenticate to the Dev Hub using the server key
        - sfdx force:auth:jwt:grant --setdefaultdevhubusername --clientid $SF_CONSUMER_KEY --jwtkeyfile assets/server.key --username $SF_USERNAME
        # Create scratch org
        - sfdx force:org:create --setdefaultusername --definitionfile config/project-scratch-def.json --wait 11 --durationdays 1
        - sfdx force:org:display
        # Push source to scratch org (this is with source code, all files, etc)
        # Is this synchronus??? 
        # This is pushing to production....
        # - sfdx force:mdapi:deploy -d mdapipkg -u $SF_USERNAME --wait 10
        # #### - sfdx force:source:push
        # Add sample data into app
        # Something we could do.............................................................................
        # - sfdx force:data:tree:import --plan data/sample-data-plan.json
        # Unit Testing
        # It looks as if the tests are implicity called with the force:mdapi:deploy above!!!!!!!!!!!!!!!!!!!
        # - sfdx force:apex:test:run --wait 10 --resultformat human --codecoverage --testlevel RunLocalTests
        # Delete Scratch Org
        - sfdx force:org:delete --noprompt
#
# Stage 2 -- Create a scratch org, create a package version, and push into org for testing
#
integration-testing:
    # Specify file paths that we want available
    # in downstream build stages for this pipeline execution.
    # This is a way to pass dynamic values from one stage to another.
    artifacts:
        paths:
            - PACKAGE_VERSION_ID.TXT
            - SCRATCH_ORG_USERNAME.TXT
    stage: integration-testing
    script:
        # Authenticate to the Dev Hub using the server key
        - sfdx force:auth:jwt:grant --setdefaultdevhubusername --clientid $SF_CONSUMER_KEY --jwtkeyfile assets/server.key --username $SF_USERNAME
        # Create scratch org
        - sfdx force:org:create --setdefaultusername --definitionfile config/project-scratch-def.json --wait 10 --durationdays 1 -a HPCTest2
        - sfdx force:org:display
        - sfdx force:mdapi:deploy -d mdapipkg -u HPCTest2 --wait 20
        # - sfdx force:source:deploy -u HPCTest2 --wait 35 --testlevel RunLocalTests -x ./mdapipkg/package.xml
        # - sfdx force:apex:test:run --wait 10 --resultformat human --codecoverage --testlevel RunLocalTests -u HPCTest2
        # Get the username for the scratch org
        - export SCRATCH_ORG_USERNAME="$(eval sfdx force:user:display --json | jq -r '.result.username')"
        - echo "$SCRATCH_ORG_USERNAME" > ./SCRATCH_ORG_USERNAME.TXT
        # Generate a new password for the scrach org
        - sfdx force:user:password:generate
        - echo -e "\n\n\n\n\n\n\n\n"
        # Display username, password, and instance URL for login
        # Be careful not to do this in a publicly accessible pipeline as it exposes the credentials of your scratch org
        - sfdx force:user:display
#
# Stage 3 -- Promote the package to downstream environment for UAT for example
#
app-deploy:
    stage: app-deploy
    # This stage must be started manually as an example of
    # conditional stages that need to wait for an approval,
    # such as waiting for QA signoff from the previous stage.
    when: manual
    script:
        # Read the scratch org username from file created in prior stage
        - export SCRATCH_ORG_USERNAME=`cat ./SCRATCH_ORG_USERNAME.TXT`
        - echo $SCRATCH_ORG_USERNAME
        # Authenticate with your playground or sandbox environment
        - sfdx force:auth:jwt:grant --setdefaultdevhubusername --clientid $SF_CONSUMER_KEY --jwtkeyfile assets/server.key --username $SF_USERNAME
        - sfdx force:config:set defaultusername=$SF_USERNAME
        # Delete Scratch Org that you were inspecting from your browser
        - sfdx force:data:record:delete --sobjecttype ScratchOrgInfo --where "SignupUsername='$SCRATCH_ORG_USERNAME'"
        # Read the package version id from file created in prior stage
        - export PACKAGE_VERSION_ID=`cat ./PACKAGE_VERSION_ID.TXT`
        - echo $PACKAGE_VERSION_ID
        # Promote the package version
        - sfdx force:package:version:promote --package $PACKAGE_VERSION_ID --noprompt
        # Install the package version
        - sfdx force:package:install --package $PACKAGE_VERSION_ID --wait 10 --publishwait 10 --noprompt